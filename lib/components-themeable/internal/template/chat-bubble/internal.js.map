{"version":3,"file":"internal.js","sourceRoot":"","sources":["../../../src/chat-bubble/internal.tsx"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC;AACtC,OAAO,EAAE,SAAS,EAAE,MAAM,EAAE,MAAM,OAAO,CAAC;AAC1C,OAAO,IAAI,MAAM,MAAM,CAAC;AAExB,OAAO,EAAE,iBAAiB,EAAE,MAAM,gDAAgD,CAAC;AAEnF,OAAO,EAAE,kBAAkB,EAAE,MAAM,yBAAyB,CAAC;AAG7D,OAAO,MAAM,MAAM,iBAAiB,CAAC;AAIrC,MAAM,CAAC,OAAO,UAAU,kBAAkB,CAAC,EACzC,IAAI,EACJ,QAAQ,EACR,MAAM,EACN,OAAO,EACP,cAAc,EACd,UAAU,GAAG,KAAK,EAClB,SAAS,EACT,iBAAiB,GAAG,IAAI,EACxB,GAAG,IAAI,EACiB;IACxB,MAAM,SAAS,GAAG,MAAM,CAAiB,IAAI,CAAC,CAAC;IAE/C,SAAS,CAAC,GAAG,EAAE;QACb,oEAAoE;QACpE,yEAAyE;QACzE,qEAAqE;QACrE,mEAAmE;QACnE,iDAAiD;QACjD,IAAI,SAAS,CAAC,OAAO,EAAE;YACrB,SAAS,CAAC,OAAO,CAAC,KAAK,GAAG,UAAU,CAAC;SACtC;IACH,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC;IAEjB,OAAO,CACL,eACE,SAAS,EAAE,MAAM,CAAC,IAAI,KAClB,iBAAiB,CAAC,IAAI,CAAC,EAC3B,GAAG,EAAE,iBAAiB,EACtB,IAAI,EAAC,OAAO,gBACA,SAAS,aAEpB,MAAM,IAAI,CACT,cAAK,GAAG,EAAE,SAAS,EAAE,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,UAAU,IAAI,MAAM,CAAC,IAAI,CAAC,YAC3E,MAAM,GACH,CACP,EAED,eACE,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,EAAE,MAAM,CAAC,oBAAoB,IAAI,EAAE,CAAC,EAAE;oBAC1E,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC,EAAE,cAAc;iBAC7C,CAAC,aAEF,cAAK,SAAS,EAAE,MAAM,CAAC,OAAO,YAAG,QAAQ,GAAO,EAE/C,OAAO,IAAI,cAAK,SAAS,EAAE,MAAM,CAAC,OAAO,YAAG,OAAO,GAAO,EAE1D,cAAc,IAAI,KAAC,kBAAkB,IAAC,OAAO,EAAC,eAAe,GAAG,IAC7D,IACF,CACP,CAAC;AACJ,CAAC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useEffect, useRef } from \"react\";\nimport clsx from \"clsx\";\n\nimport { getDataAttributes } from \"../internal/base-component/get-data-attributes\";\nimport { InternalBaseComponentProps } from \"../internal/base-component/use-base-component\";\nimport { InternalLoadingBar } from \"../loading-bar/internal\";\nimport { ChatBubbleProps } from \"./interfaces.js\";\n\nimport styles from \"./styles.css.js\";\n\nexport interface InternalChatBubbleProps extends ChatBubbleProps, InternalBaseComponentProps {}\n\nexport default function InternalChatBubble({\n  type,\n  children,\n  avatar,\n  actions,\n  showLoadingBar,\n  hideAvatar = false,\n  ariaLabel,\n  __internalRootRef = null,\n  ...rest\n}: InternalChatBubbleProps) {\n  const avatarRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    // We have to do this because `inert` isn't properly supported until\n    // React 19 and this seems much more maintainable than version detection.\n    // `inert` is better than `hidden` because it also blocks pointer and\n    // focus events as well as hiding the contents from screen readers.\n    // https://github.com/facebook/react/issues/17157\n    if (avatarRef.current) {\n      avatarRef.current.inert = hideAvatar;\n    }\n  }, [hideAvatar]);\n\n  return (\n    <div\n      className={styles.root}\n      {...getDataAttributes(rest)}\n      ref={__internalRootRef}\n      role=\"group\"\n      aria-label={ariaLabel}\n    >\n      {avatar && (\n        <div ref={avatarRef} className={clsx(styles.avatar, hideAvatar && styles.hide)}>\n          {avatar}\n        </div>\n      )}\n\n      <div\n        className={clsx(styles[\"message-area\"], styles[`chat-bubble-type-${type}`], {\n          [styles[\"with-loading-bar\"]]: showLoadingBar,\n        })}\n      >\n        <div className={styles.content}>{children}</div>\n\n        {actions && <div className={styles.actions}>{actions}</div>}\n\n        {showLoadingBar && <InternalLoadingBar variant=\"gen-ai-masked\" />}\n      </div>\n    </div>\n  );\n}\n"]}